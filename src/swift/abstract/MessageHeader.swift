import Foundation


public class MCOMessageHeader {
    private var nativeInstance:CMessageHeader;
    
    internal func CMessageHeader() -> CMessageHeader {
        return nativeInstance;
    }
    
    internal init(_ header:CMessageHeader) {
        self.nativeInstance = header;
    }
    
    public init(data:Data) {
        self.nativeInstance = CMessageHeader_new();
        self.importHeadersData(data: data);
    }
    
    deinit {
        nativeInstance.release()
    }
    
    /** Message-ID field.*/
    public var messageID : String? {
        set { self.nativeInstance.messageID = newValue?.mailCoreString() ?? MailCoreString() }
        get { return self.nativeInstance.messageID.string() }
    }
    
    /** Message-ID auto-generated flag.*/
    public var isMessageIDAutoGenerated : Bool {
        get { return self.nativeInstance.isMessageIDAutoGenerated() }
    }
    
    /** References field. It's an array of message-ids.*/
    public var references : Array<String> {
        set { self.nativeInstance.references = Array<String>.cast(newValue) }
        get { return Array<String>.cast(self.nativeInstance.references) }
    }
    
    /** In-Reply-To field. It's an array of message-ids.*/
    public var inReplyTo : Array<String> {
        set { self.nativeInstance.inReplyTo = Array<String>.cast(newValue) }
        get { return Array<String>.cast(self.nativeInstance.inReplyTo) }
    }
    
    /** To field: recipient of the message. It's an array of MCOAddress.*/
    public var to: Array<MCOAddress> {
        set { self.nativeInstance.to = Array<MCOAddress>.cast(newValue) }
        get { return Array<MCOAddress>.cast(self.nativeInstance.to) }
    }
    
    /** Cc field: cc recipient of the message. It's an array of MCOAddress.*/
    public var cc: Array<MCOAddress> {
        set { self.nativeInstance.cc = Array<MCOAddress>.cast(newValue) }
        get { return Array<MCOAddress>.cast(self.nativeInstance.cc) }
    }
    
    /** Bcc field: bcc recipient of the message. It's an array of MCOAddress.*/
    public var bcc: Array<MCOAddress> {
        set { self.nativeInstance.bcc = Array<MCOAddress>.cast(newValue) }
        get { return Array<MCOAddress>.cast(self.nativeInstance.bcc) }
    }
    
    /** Reply-To field. It's an array of MCOAddress.*/
    public var replyTo: Array<MCOAddress> {
        set { self.nativeInstance.replyTo = Array<MCOAddress>.cast(newValue) }
        get { return Array<MCOAddress>.cast(self.nativeInstance.replyTo) }
    }
    
    /** Subject of the message.*/
    public var subject: String? {
        set { self.nativeInstance.subject = newValue?.mailCoreString() ?? MailCoreString() }
        get { return self.nativeInstance.subject.string() }
    }
    
    /** Email user agent name: X-Mailer header.*/
    public var userAgent: String? {
        set { self.nativeInstance.userAgent = newValue?.mailCoreString() ?? MailCoreString() }
        get { return self.nativeInstance.userAgent.string() }
    }
    
    public var receivedDate: Date {
        set { self.nativeInstance.receivedDate = time_t(newValue.timeIntervalSince1970) }
        get { return Date.init(timeIntervalSince1970: TimeInterval(self.nativeInstance.receivedDate))}
    }
    
    public var date: Date {
        set { self.nativeInstance.date = time_t(newValue.timeIntervalSince1970) }
        get { return Date.init(timeIntervalSince1970: TimeInterval(self.nativeInstance.date))}
    }
    
    public var sender: MCOAddress? {
        set {
            if let address = newValue?.getNativeInstance() {
                self.nativeInstance.sender = address
            }
        }
        get { return MCOAddress.init(address: self.nativeInstance.sender)}
    }
    
    public var from: MCOAddress? {
        set {
            if let address = newValue?.getNativeInstance() {
                self.nativeInstance.from = address
            }
        }
        get { return MCOAddress.init(address: self.nativeInstance.from)}
    }
    
    /** Adds a custom header.*/
    public func setExtraHeaderValue(value: String, name: String) {
        nativeInstance.setExtraHeaderValue(value: value.mailCoreString(), name: name.mailCoreString())
    }
    
    /** Remove a given custom header.*/
    public func removeExtraHeaderForName(name: String) {
        nativeInstance.removeExtraHeaderForName(name: name.mailCoreString())
    }
    
    /** Returns the value of a given custom header.*/
    public func extraHeaderValue(forName: String) -> String? {
        return nativeInstance.extraHeaderValueForName(name: forName.mailCoreString()).string()
    }
    
    /** Returns an array with the names of all custom headers.*/
    public func allExtraHeadersNames() -> Array<String> {
        return Array<String>.cast(nativeInstance.allExtraHeadersNames());
    }
    
    /** Extracted subject (also remove square brackets).*/
    public func extractedSubject() -> String? {
        return nativeInstance.extractedSubject().string()
    }
    
    /** Extracted subject (don't remove square brackets).*/
    public func partialExtractedSubject() -> String? {
        return nativeInstance.partialExtractedSubject().string()
    }
    
    /** Fill the header using the given RFC 822 data.*/
    public func importHeadersData(data: Data) {
        let bytes: UnsafePointer<Int8>? = data.withUnsafeBytes{(bytes: UnsafePointer<Int8>)-> UnsafePointer<Int8> in
            return bytes;
        }
        nativeInstance.importHeadersData(bytes: bytes, length: UInt32(data.count));
    }
    
    /** Returns a header that can be used as a base for a reply message.*/
    public func replyHeaderWithExcludedRecipients(excludedRecipients: Array<MCOAddress>) -> MCOMessageHeader {
        return MCOMessageHeader(nativeInstance.replyHeaderWithExcludedRecipients(excludedRecipients: Array<MCOAddress>.cast(excludedRecipients)));
    }
    
    /** Returns a header that can be used as a base for a reply all message.*/
    public func replyAllHeaderWithExcludedRecipients(excludedRecipients: Array<MCOAddress>) -> MCOMessageHeader {
        return MCOMessageHeader(nativeInstance.replyAllHeaderWithExcludedRecipients(excludedRecipients: Array<MCOAddress>.cast(excludedRecipients)));
    }
    
    /** Returns a header that can be used as a base for a forward message.*/
    public func forwardHeader() -> MCOMessageHeader {
        return MCOMessageHeader(nativeInstance.forwardHeader());
    }
    
}
