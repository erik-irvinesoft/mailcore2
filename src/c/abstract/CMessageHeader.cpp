#include <MailCore/MCCore.h>
#include "CMessageHeader.h"
#include "CBase+Private.h"

#define nativeType mailcore::MessageHeader
#define structName CMessageHeader

C_SYNTHESIZE_STRING(setMessageID, messageID);
C_SYNTHESIZE_STRING(setUserAgent, userAgent);
C_SYNTHESIZE_STRING(setSubject, subject);
C_SYNTHESIZE_ARRAY(setReferences, references);
C_SYNTHESIZE_ARRAY(setInReplyTo, inReplyTo);
C_SYNTHESIZE_ARRAY(setTo, to);
C_SYNTHESIZE_ARRAY(setCc, cc);
C_SYNTHESIZE_ARRAY(setBcc, bcc);
C_SYNTHESIZE_ARRAY(setReplyTo, replyTo);

bool                    isMessageIDAutoGenerated(struct CMessageHeader *self);
void                    setExtraHeaderValue(struct CMessageHeader *self, const UChar* value, const UChar* name);
void                    removeExtraHeaderForName(struct CMessageHeader *self, const UChar* name);
const UChar*            extraHeaderValueForName(struct CMessageHeader *self, const UChar* name);
CArray                  allExtraHeadersNames(struct CMessageHeader *self);
const UChar*            extractedSubject(struct CMessageHeader *self);
const UChar*            partialExtractedSubject(struct CMessageHeader *self);
void                    importHeadersData(struct CMessageHeader *self, const char *bytes, unsigned int length);
struct CMessageHeader   replyHeaderWithExcludedRecipients(struct CMessageHeader *self, CArray * /* MCOAddress */excludedRecipients);
struct CMessageHeader   replyAllHeaderWithExcludedRecipients(struct CMessageHeader *self, CArray * /* MCOAddress */excludedRecipients);
struct CMessageHeader   forwardHeader(struct CMessageHeader *self);

CMessageHeader newCMessageHeader(mailcore::MessageHeader *header){
    CMessageHeader self;
    
    self.nativeInstance = header;
    header->retain();
    
    self.messageID = &messageID;
    self.setMessageID = &setMessageID;
    self.references = &references;
    self.setReferences = &setReferences;
    self.inReplyTo = &inReplyTo;
    self.setInReplyTo = &setInReplyTo;
    self.to = &to;
    self.setTo = &setTo;
    self.cc = &cc;
    self.setCc = &setCc;
    self.bcc = &bcc;
    self.setBcc = &setBcc;
    self.replyTo = &replyTo;
    self.setReplyTo = &setReplyTo;
    self.subject = &subject;
    self.setSubject = &setSubject;
    self.userAgent = &userAgent;
    self.setUserAgent = &setUserAgent;
    self.isMessageIDAutoGenerated = &isMessageIDAutoGenerated;
    self.setExtraHeaderValue = &setExtraHeaderValue;
    self.removeExtraHeaderForName = &removeExtraHeaderForName;
    self.extraHeaderValueForName = &extraHeaderValueForName;
    self.allExtraHeadersNames = &allExtraHeadersNames;
    self.extractedSubject = &extractedSubject;
    self.partialExtractedSubject = &partialExtractedSubject;
    self.importHeadersData = &importHeadersData;
    self.replyHeaderWithExcludedRecipients = &replyHeaderWithExcludedRecipients;
    self.replyAllHeaderWithExcludedRecipients = &replyAllHeaderWithExcludedRecipients;
    self.forwardHeader = &forwardHeader;
    
    return self;
}

mailcore::MessageHeader* cast(CMessageHeader *self){
    return reinterpret_cast<mailcore::MessageHeader*>(self->nativeInstance);
}

extern "C" CMessageHeader newCMessageHeader(){
    return newCMessageHeader(new mailcore::MessageHeader());
}

extern "C" void deleteCMessageHeader(CMessageHeader *self){
    C_NATIVE_INSTANCE->release();
}

bool isMessageIDAutoGenerated(struct CMessageHeader *self){
    return C_NATIVE_INSTANCE->isMessageIDAutoGenerated();
}

void setExtraHeaderValue(struct CMessageHeader *self, const UChar* value, const UChar* name){
    C_NATIVE_INSTANCE->setExtraHeader(mailcore::String::stringWithCharacters(name), mailcore::String::stringWithCharacters(value));
}

const UChar* extraHeaderValueForName(struct CMessageHeader *self, const UChar* name){
    return C_NATIVE_INSTANCE->extraHeaderValueForName(mailcore::String::stringWithCharacters(name))->unicodeCharacters();
}

void removeExtraHeaderForName(struct CMessageHeader *self, const UChar* name){
    C_NATIVE_INSTANCE->removeExtraHeader(mailcore::String::stringWithCharacters(name));
}

CArray allExtraHeadersNames(struct CMessageHeader *self){
    return newCArray2(C_NATIVE_INSTANCE->allExtraHeadersNames());
}

const UChar* extractedSubject(struct CMessageHeader *self){
    return C_NATIVE_INSTANCE->extractedSubject()->unicodeCharacters();
}

const UChar* partialExtractedSubject(struct CMessageHeader *self){
    return C_NATIVE_INSTANCE->partialExtractedSubject()->unicodeCharacters();
}

void importHeadersData(struct CMessageHeader *self, const char *bytes, unsigned int length){
    C_NATIVE_INSTANCE->importHeadersData(mailcore::Data::dataWithBytes(bytes, length));
}

CMessageHeader replyHeaderWithExcludedRecipients(struct CMessageHeader *self, CArray * /* MCOAddress */excludedRecipients){
    return newCMessageHeader(C_NATIVE_INSTANCE->replyHeader(false, cast(excludedRecipients)));
}

struct CMessageHeader replyAllHeaderWithExcludedRecipients(struct CMessageHeader *self, CArray * /* MCOAddress */excludedRecipients){
    return newCMessageHeader(C_NATIVE_INSTANCE->replyHeader(true, cast(excludedRecipients)));
}

struct CMessageHeader forwardHeader(struct CMessageHeader *self){
    return newCMessageHeader(C_NATIVE_INSTANCE->forwardHeader());
}











