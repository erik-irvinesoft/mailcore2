#include <MailCore/MCCore.h>
#include "CMessageHeader.h"
#include "CBase+Private.h"

#define nativeType mailcore::MessageHeader
#define structName CMessageHeader

C_SYNTHESIZE_STRING(setMessageID, messageID);
C_SYNTHESIZE_STRING(setUserAgent, userAgent);
C_SYNTHESIZE_STRING(setSubject, subject);
C_SYNTHESIZE_ARRAY(setReferences, references);
C_SYNTHESIZE_ARRAY(setInReplyTo, inReplyTo);
C_SYNTHESIZE_ARRAY(setTo, to);
C_SYNTHESIZE_ARRAY(setCc, cc);
C_SYNTHESIZE_ARRAY(setBcc, bcc);
C_SYNTHESIZE_ARRAY(setReplyTo, replyTo);
C_SYNTHESIZE_SCALAR(time_t, time_t, setReceivedDate, receivedDate);
C_SYNTHESIZE_SCALAR(time_t, time_t, setDate, date);
C_SYNTHESIZE_MAILCORE_OBJ(CAddress, CAddress_new, setSender, sender);
C_SYNTHESIZE_MAILCORE_OBJ(CAddress, CAddress_new, setFrom, from);

CMessageHeader CMessageHeader_new(mailcore::MessageHeader *header){
    CMessageHeader self;
    self.instance = header;
    self.instance->retain();
    return self;
}

CMessageHeader CMessageHeader_new(){
    return CMessageHeader_new(new mailcore::MessageHeader());
}

void CMessageHeader_release(CMessageHeader self){
    self.instance->release();
}

bool CMessageHeader_isMessageIDAutoGenerated(struct CMessageHeader self){
    return self.instance->isMessageIDAutoGenerated();
}

void CMessageHeader_setExtraHeaderValue(struct CMessageHeader self, MailCoreString value, MailCoreString name){
    self.instance->setExtraHeader(name.instance, value.instance);
}

MailCoreString CMessageHeader_extraHeaderValueForName(struct CMessageHeader self, MailCoreString name) {
    return MailCoreString_new(self.instance->extraHeaderValueForName(name.instance));
}

void CMessageHeader_removeExtraHeaderForName(struct CMessageHeader self, MailCoreString name){
    self.instance->removeExtraHeader(name.instance);
}

CArray CMessageHeader_allExtraHeadersNames(struct CMessageHeader self){
    return CArray_new(self.instance->allExtraHeadersNames());
}

MailCoreString CMessageHeader_extractedSubject(struct CMessageHeader self){
    return MailCoreString_new(self.instance->extractedSubject());
}

MailCoreString CMessageHeader_partialExtractedSubject(struct CMessageHeader self){
    return MailCoreString_new(self.instance->partialExtractedSubject());
}

void CMessageHeader_importHeadersData(struct CMessageHeader self, const char *bytes, unsigned int length){
    self.instance->importHeadersData(mailcore::Data::dataWithBytes(bytes, length));
}

CMessageHeader CMessageHeader_replyHeaderWithExcludedRecipients(struct CMessageHeader self, CArray /* MCOAddress */excludedRecipients){
    return CMessageHeader_new(self.instance->replyHeader(false, excludedRecipients.instance));
}

struct CMessageHeader CMessageHeader_replyAllHeaderWithExcludedRecipients(struct CMessageHeader self, CArray /* MCOAddress */excludedRecipients){
    return CMessageHeader_new(self.instance->replyHeader(true, excludedRecipients.instance));
}

struct CMessageHeader CMessageHeader_forwardHeader(struct CMessageHeader self){
    return CMessageHeader_new(self.instance->forwardHeader());
}











